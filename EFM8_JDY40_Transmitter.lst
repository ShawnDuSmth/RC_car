0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Thu Mar 28 15:09:06 2024
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_JDY40_Transmitter
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _SendATCommand
0000             30            public _waitms_or_RI1
0000             31            public _RXU1
0000             32            public _getstr1
0000             33            public _getchar1_with_timeout
0000             34            public _getchar1
0000             35            public _sendstr1
0000             36            public _putchar1
0000             37            public _UART1_Init
0000             38            public _waitms
0000             39            public _Timer3us
0000             40            public _Volts_at_Pin
0000             41            public _ADC_at_Pin
0000             42            public _Get_ADC
0000             43            public _InitPinADC
0000             44            public _TIMER0_Init
0000             45            public _InitADC
0000             46            public __c51_external_startup
0000             47            public _buff
0000             48   ;--------------------------------------------------------
0000             49   ; Special Function Registers
0000             50   ;--------------------------------------------------------
0000             51   _ACC            DATA 0xe0
0000             52   _ADC0ASAH       DATA 0xb6
0000             53   _ADC0ASAL       DATA 0xb5
0000             54   _ADC0ASCF       DATA 0xa1
0000             55   _ADC0ASCT       DATA 0xc7
0000             56   _ADC0CF0        DATA 0xbc
0000             57   _ADC0CF1        DATA 0xb9
0000             58   _ADC0CF2        DATA 0xdf
0000             59   _ADC0CN0        DATA 0xe8
0000             60   _ADC0CN1        DATA 0xb2
0000             61   _ADC0CN2        DATA 0xb3
0000             62   _ADC0GTH        DATA 0xc4
0000             63   _ADC0GTL        DATA 0xc3
0000             64   _ADC0H          DATA 0xbe
0000             65   _ADC0L          DATA 0xbd
0000             66   _ADC0LTH        DATA 0xc6
0000             67   _ADC0LTL        DATA 0xc5
0000             68   _ADC0MX         DATA 0xbb
0000             69   _B              DATA 0xf0
0000             70   _CKCON0         DATA 0x8e
0000             71   _CKCON1         DATA 0xa6
0000             72   _CLEN0          DATA 0xc6
0000             73   _CLIE0          DATA 0xc7
0000             74   _CLIF0          DATA 0xe8
0000             75   _CLKSEL         DATA 0xa9
0000             76   _CLOUT0         DATA 0xd1
0000             77   _CLU0CF         DATA 0xb1
0000             78   _CLU0FN         DATA 0xaf
0000             79   _CLU0MX         DATA 0x84
0000             80   _CLU1CF         DATA 0xb3
0000             81   _CLU1FN         DATA 0xb2
0000             82   _CLU1MX         DATA 0x85
0000             83   _CLU2CF         DATA 0xb6
0000             84   _CLU2FN         DATA 0xb5
0000             85   _CLU2MX         DATA 0x91
0000             86   _CLU3CF         DATA 0xbf
0000             87   _CLU3FN         DATA 0xbe
0000             88   _CLU3MX         DATA 0xae
0000             89   _CMP0CN0        DATA 0x9b
0000             90   _CMP0CN1        DATA 0x99
0000             91   _CMP0MD         DATA 0x9d
0000             92   _CMP0MX         DATA 0x9f
0000             93   _CMP1CN0        DATA 0xbf
0000             94   _CMP1CN1        DATA 0xac
0000             95   _CMP1MD         DATA 0xab
0000             96   _CMP1MX         DATA 0xaa
0000             97   _CRC0CN0        DATA 0xce
0000             98   _CRC0CN1        DATA 0x86
0000             99   _CRC0CNT        DATA 0xd3
0000            100   _CRC0DAT        DATA 0xcb
0000            101   _CRC0FLIP       DATA 0xcf
0000            102   _CRC0IN         DATA 0xca
0000            103   _CRC0ST         DATA 0xd2
0000            104   _DAC0CF0        DATA 0x91
0000            105   _DAC0CF1        DATA 0x92
0000            106   _DAC0H          DATA 0x85
0000            107   _DAC0L          DATA 0x84
0000            108   _DAC1CF0        DATA 0x93
0000            109   _DAC1CF1        DATA 0x94
0000            110   _DAC1H          DATA 0x8a
0000            111   _DAC1L          DATA 0x89
0000            112   _DAC2CF0        DATA 0x95
0000            113   _DAC2CF1        DATA 0x96
0000            114   _DAC2H          DATA 0x8c
0000            115   _DAC2L          DATA 0x8b
0000            116   _DAC3CF0        DATA 0x9a
0000            117   _DAC3CF1        DATA 0x9c
0000            118   _DAC3H          DATA 0x8e
0000            119   _DAC3L          DATA 0x8d
0000            120   _DACGCF0        DATA 0x88
0000            121   _DACGCF1        DATA 0x98
0000            122   _DACGCF2        DATA 0xa2
0000            123   _DERIVID        DATA 0xad
0000            124   _DEVICEID       DATA 0xb5
0000            125   _DPH            DATA 0x83
0000            126   _DPL            DATA 0x82
0000            127   _EIE1           DATA 0xe6
0000            128   _EIE2           DATA 0xf3
0000            129   _EIP1           DATA 0xbb
0000            130   _EIP1H          DATA 0xee
0000            131   _EIP2           DATA 0xed
0000            132   _EIP2H          DATA 0xf6
0000            133   _EMI0CN         DATA 0xe7
0000            134   _FLKEY          DATA 0xb7
0000            135   _HFO0CAL        DATA 0xc7
0000            136   _HFO1CAL        DATA 0xd6
0000            137   _HFOCN          DATA 0xef
0000            138   _I2C0ADM        DATA 0xff
0000            139   _I2C0CN0        DATA 0xba
0000            140   _I2C0DIN        DATA 0xbc
0000            141   _I2C0DOUT       DATA 0xbb
0000            142   _I2C0FCN0       DATA 0xad
0000            143   _I2C0FCN1       DATA 0xab
0000            144   _I2C0FCT        DATA 0xf5
0000            145   _I2C0SLAD       DATA 0xbd
0000            146   _I2C0STAT       DATA 0xb9
0000            147   _IE             DATA 0xa8
0000            148   _IP             DATA 0xb8
0000            149   _IPH            DATA 0xf2
0000            150   _IT01CF         DATA 0xe4
0000            151   _LFO0CN         DATA 0xb1
0000            152   _P0             DATA 0x80
0000            153   _P0MASK         DATA 0xfe
0000            154   _P0MAT          DATA 0xfd
0000            155   _P0MDIN         DATA 0xf1
0000            156   _P0MDOUT        DATA 0xa4
0000            157   _P0SKIP         DATA 0xd4
0000            158   _P1             DATA 0x90
0000            159   _P1MASK         DATA 0xee
0000            160   _P1MAT          DATA 0xed
0000            161   _P1MDIN         DATA 0xf2
0000            162   _P1MDOUT        DATA 0xa5
0000            163   _P1SKIP         DATA 0xd5
0000            164   _P2             DATA 0xa0
0000            165   _P2MASK         DATA 0xfc
0000            166   _P2MAT          DATA 0xfb
0000            167   _P2MDIN         DATA 0xf3
0000            168   _P2MDOUT        DATA 0xa6
0000            169   _P2SKIP         DATA 0xcc
0000            170   _P3             DATA 0xb0
0000            171   _P3MDIN         DATA 0xf4
0000            172   _P3MDOUT        DATA 0x9c
0000            173   _PCA0CENT       DATA 0x9e
0000            174   _PCA0CLR        DATA 0x9c
0000            175   _PCA0CN0        DATA 0xd8
0000            176   _PCA0CPH0       DATA 0xfc
0000            177   _PCA0CPH1       DATA 0xea
0000            178   _PCA0CPH2       DATA 0xec
0000            179   _PCA0CPH3       DATA 0xf5
0000            180   _PCA0CPH4       DATA 0x85
0000            181   _PCA0CPH5       DATA 0xde
0000            182   _PCA0CPL0       DATA 0xfb
0000            183   _PCA0CPL1       DATA 0xe9
0000            184   _PCA0CPL2       DATA 0xeb
0000            185   _PCA0CPL3       DATA 0xf4
0000            186   _PCA0CPL4       DATA 0x84
0000            187   _PCA0CPL5       DATA 0xdd
0000            188   _PCA0CPM0       DATA 0xda
0000            189   _PCA0CPM1       DATA 0xdb
0000            190   _PCA0CPM2       DATA 0xdc
0000            191   _PCA0CPM3       DATA 0xae
0000            192   _PCA0CPM4       DATA 0xaf
0000            193   _PCA0CPM5       DATA 0xcc
0000            194   _PCA0H          DATA 0xfa
0000            195   _PCA0L          DATA 0xf9
0000            196   _PCA0MD         DATA 0xd9
0000            197   _PCA0POL        DATA 0x96
0000            198   _PCA0PWM        DATA 0xf7
0000            199   _PCON0          DATA 0x87
0000            200   _PCON1          DATA 0xcd
0000            201   _PFE0CN         DATA 0xc1
0000            202   _PRTDRV         DATA 0xf6
0000            203   _PSCTL          DATA 0x8f
0000            204   _PSTAT0         DATA 0xaa
0000            205   _PSW            DATA 0xd0
0000            206   _REF0CN         DATA 0xd1
0000            207   _REG0CN         DATA 0xc9
0000            208   _REVID          DATA 0xb6
0000            209   _RSTSRC         DATA 0xef
0000            210   _SBCON1         DATA 0x94
0000            211   _SBRLH1         DATA 0x96
0000            212   _SBRLL1         DATA 0x95
0000            213   _SBUF           DATA 0x99
0000            214   _SBUF0          DATA 0x99
0000            215   _SBUF1          DATA 0x92
0000            216   _SCON           DATA 0x98
0000            217   _SCON0          DATA 0x98
0000            218   _SCON1          DATA 0xc8
0000            219   _SFRPAGE        DATA 0xa7
0000            220   _SFRPGCN        DATA 0xbc
0000            221   _SFRSTACK       DATA 0xd7
0000            222   _SMB0ADM        DATA 0xd6
0000            223   _SMB0ADR        DATA 0xd7
0000            224   _SMB0CF         DATA 0xc1
0000            225   _SMB0CN0        DATA 0xc0
0000            226   _SMB0DAT        DATA 0xc2
0000            227   _SMB0FCN0       DATA 0xc3
0000            228   _SMB0FCN1       DATA 0xc4
0000            229   _SMB0FCT        DATA 0xef
0000            230   _SMB0RXLN       DATA 0xc5
0000            231   _SMB0TC         DATA 0xac
0000            232   _SMOD1          DATA 0x93
0000            233   _SP             DATA 0x81
0000            234   _SPI0CFG        DATA 0xa1
0000            235   _SPI0CKR        DATA 0xa2
0000            236   _SPI0CN0        DATA 0xf8
0000            237   _SPI0DAT        DATA 0xa3
0000            238   _SPI0FCN0       DATA 0x9a
0000            239   _SPI0FCN1       DATA 0x9b
0000            240   _SPI0FCT        DATA 0xf7
0000            241   _SPI0PCF        DATA 0xdf
0000            242   _TCON           DATA 0x88
0000            243   _TH0            DATA 0x8c
0000            244   _TH1            DATA 0x8d
0000            245   _TL0            DATA 0x8a
0000            246   _TL1            DATA 0x8b
0000            247   _TMOD           DATA 0x89
0000            248   _TMR2CN0        DATA 0xc8
0000            249   _TMR2CN1        DATA 0xfd
0000            250   _TMR2H          DATA 0xcf
0000            251   _TMR2L          DATA 0xce
0000            252   _TMR2RLH        DATA 0xcb
0000            253   _TMR2RLL        DATA 0xca
0000            254   _TMR3CN0        DATA 0x91
0000            255   _TMR3CN1        DATA 0xfe
0000            256   _TMR3H          DATA 0x95
0000            257   _TMR3L          DATA 0x94
0000            258   _TMR3RLH        DATA 0x93
0000            259   _TMR3RLL        DATA 0x92
0000            260   _TMR4CN0        DATA 0x98
0000            261   _TMR4CN1        DATA 0xff
0000            262   _TMR4H          DATA 0xa5
0000            263   _TMR4L          DATA 0xa4
0000            264   _TMR4RLH        DATA 0xa3
0000            265   _TMR4RLL        DATA 0xa2
0000            266   _TMR5CN0        DATA 0xc0
0000            267   _TMR5CN1        DATA 0xf1
0000            268   _TMR5H          DATA 0xd5
0000            269   _TMR5L          DATA 0xd4
0000            270   _TMR5RLH        DATA 0xd3
0000            271   _TMR5RLL        DATA 0xd2
0000            272   _UART0PCF       DATA 0xd9
0000            273   _UART1FCN0      DATA 0x9d
0000            274   _UART1FCN1      DATA 0xd8
0000            275   _UART1FCT       DATA 0xfa
0000            276   _UART1LIN       DATA 0x9e
0000            277   _UART1PCF       DATA 0xda
0000            278   _VDM0CN         DATA 0xff
0000            279   _WDTCN          DATA 0x97
0000            280   _XBR0           DATA 0xe1
0000            281   _XBR1           DATA 0xe2
0000            282   _XBR2           DATA 0xe3
0000            283   _XOSC0CN        DATA 0x86
0000            284   _DPTR           DATA 0x8382
0000            285   _TMR2RL         DATA 0xcbca
0000            286   _TMR3RL         DATA 0x9392
0000            287   _TMR4RL         DATA 0xa3a2
0000            288   _TMR5RL         DATA 0xd3d2
0000            289   _TMR0           DATA 0x8c8a
0000            290   _TMR1           DATA 0x8d8b
0000            291   _TMR2           DATA 0xcfce
0000            292   _TMR3           DATA 0x9594
0000            293   _TMR4           DATA 0xa5a4
0000            294   _TMR5           DATA 0xd5d4
0000            295   _SBRL1          DATA 0x9695
0000            296   _PCA0           DATA 0xfaf9
0000            297   _PCA0CP0        DATA 0xfcfb
0000            298   _PCA0CP1        DATA 0xeae9
0000            299   _PCA0CP2        DATA 0xeceb
0000            300   _PCA0CP3        DATA 0xf5f4
0000            301   _PCA0CP4        DATA 0x8584
0000            302   _PCA0CP5        DATA 0xdedd
0000            303   _ADC0ASA        DATA 0xb6b5
0000            304   _ADC0GT         DATA 0xc4c3
0000            305   _ADC0           DATA 0xbebd
0000            306   _ADC0LT         DATA 0xc6c5
0000            307   _DAC0           DATA 0x8584
0000            308   _DAC1           DATA 0x8a89
0000            309   _DAC2           DATA 0x8c8b
0000            310   _DAC3           DATA 0x8e8d
0000            311   ;--------------------------------------------------------
0000            312   ; special function bits
0000            313   ;--------------------------------------------------------
0000            314   _ACC_0          BIT 0xe0
0000            315   _ACC_1          BIT 0xe1
0000            316   _ACC_2          BIT 0xe2
0000            317   _ACC_3          BIT 0xe3
0000            318   _ACC_4          BIT 0xe4
0000            319   _ACC_5          BIT 0xe5
0000            320   _ACC_6          BIT 0xe6
0000            321   _ACC_7          BIT 0xe7
0000            322   _TEMPE          BIT 0xe8
0000            323   _ADGN0          BIT 0xe9
0000            324   _ADGN1          BIT 0xea
0000            325   _ADWINT         BIT 0xeb
0000            326   _ADBUSY         BIT 0xec
0000            327   _ADINT          BIT 0xed
0000            328   _IPOEN          BIT 0xee
0000            329   _ADEN           BIT 0xef
0000            330   _B_0            BIT 0xf0
0000            331   _B_1            BIT 0xf1
0000            332   _B_2            BIT 0xf2
0000            333   _B_3            BIT 0xf3
0000            334   _B_4            BIT 0xf4
0000            335   _B_5            BIT 0xf5
0000            336   _B_6            BIT 0xf6
0000            337   _B_7            BIT 0xf7
0000            338   _C0FIF          BIT 0xe8
0000            339   _C0RIF          BIT 0xe9
0000            340   _C1FIF          BIT 0xea
0000            341   _C1RIF          BIT 0xeb
0000            342   _C2FIF          BIT 0xec
0000            343   _C2RIF          BIT 0xed
0000            344   _C3FIF          BIT 0xee
0000            345   _C3RIF          BIT 0xef
0000            346   _D1SRC0         BIT 0x88
0000            347   _D1SRC1         BIT 0x89
0000            348   _D1AMEN         BIT 0x8a
0000            349   _D01REFSL       BIT 0x8b
0000            350   _D3SRC0         BIT 0x8c
0000            351   _D3SRC1         BIT 0x8d
0000            352   _D3AMEN         BIT 0x8e
0000            353   _D23REFSL       BIT 0x8f
0000            354   _D0UDIS         BIT 0x98
0000            355   _D1UDIS         BIT 0x99
0000            356   _D2UDIS         BIT 0x9a
0000            357   _D3UDIS         BIT 0x9b
0000            358   _EX0            BIT 0xa8
0000            359   _ET0            BIT 0xa9
0000            360   _EX1            BIT 0xaa
0000            361   _ET1            BIT 0xab
0000            362   _ES0            BIT 0xac
0000            363   _ET2            BIT 0xad
0000            364   _ESPI0          BIT 0xae
0000            365   _EA             BIT 0xaf
0000            366   _PX0            BIT 0xb8
0000            367   _PT0            BIT 0xb9
0000            368   _PX1            BIT 0xba
0000            369   _PT1            BIT 0xbb
0000            370   _PS0            BIT 0xbc
0000            371   _PT2            BIT 0xbd
0000            372   _PSPI0          BIT 0xbe
0000            373   _P0_0           BIT 0x80
0000            374   _P0_1           BIT 0x81
0000            375   _P0_2           BIT 0x82
0000            376   _P0_3           BIT 0x83
0000            377   _P0_4           BIT 0x84
0000            378   _P0_5           BIT 0x85
0000            379   _P0_6           BIT 0x86
0000            380   _P0_7           BIT 0x87
0000            381   _P1_0           BIT 0x90
0000            382   _P1_1           BIT 0x91
0000            383   _P1_2           BIT 0x92
0000            384   _P1_3           BIT 0x93
0000            385   _P1_4           BIT 0x94
0000            386   _P1_5           BIT 0x95
0000            387   _P1_6           BIT 0x96
0000            388   _P1_7           BIT 0x97
0000            389   _P2_0           BIT 0xa0
0000            390   _P2_1           BIT 0xa1
0000            391   _P2_2           BIT 0xa2
0000            392   _P2_3           BIT 0xa3
0000            393   _P2_4           BIT 0xa4
0000            394   _P2_5           BIT 0xa5
0000            395   _P2_6           BIT 0xa6
0000            396   _P3_0           BIT 0xb0
0000            397   _P3_1           BIT 0xb1
0000            398   _P3_2           BIT 0xb2
0000            399   _P3_3           BIT 0xb3
0000            400   _P3_4           BIT 0xb4
0000            401   _P3_7           BIT 0xb7
0000            402   _CCF0           BIT 0xd8
0000            403   _CCF1           BIT 0xd9
0000            404   _CCF2           BIT 0xda
0000            405   _CCF3           BIT 0xdb
0000            406   _CCF4           BIT 0xdc
0000            407   _CCF5           BIT 0xdd
0000            408   _CR             BIT 0xde
0000            409   _CF             BIT 0xdf
0000            410   _PARITY         BIT 0xd0
0000            411   _F1             BIT 0xd1
0000            412   _OV             BIT 0xd2
0000            413   _RS0            BIT 0xd3
0000            414   _RS1            BIT 0xd4
0000            415   _F0             BIT 0xd5
0000            416   _AC             BIT 0xd6
0000            417   _CY             BIT 0xd7
0000            418   _RI             BIT 0x98
0000            419   _TI             BIT 0x99
0000            420   _RB8            BIT 0x9a
0000            421   _TB8            BIT 0x9b
0000            422   _REN            BIT 0x9c
0000            423   _CE             BIT 0x9d
0000            424   _SMODE          BIT 0x9e
0000            425   _RI1            BIT 0xc8
0000            426   _TI1            BIT 0xc9
0000            427   _RBX1           BIT 0xca
0000            428   _TBX1           BIT 0xcb
0000            429   _REN1           BIT 0xcc
0000            430   _PERR1          BIT 0xcd
0000            431   _OVR1           BIT 0xce
0000            432   _SI             BIT 0xc0
0000            433   _ACK            BIT 0xc1
0000            434   _ARBLOST        BIT 0xc2
0000            435   _ACKRQ          BIT 0xc3
0000            436   _STO            BIT 0xc4
0000            437   _STA            BIT 0xc5
0000            438   _TXMODE         BIT 0xc6
0000            439   _MASTER         BIT 0xc7
0000            440   _SPIEN          BIT 0xf8
0000            441   _TXNF           BIT 0xf9
0000            442   _NSSMD0         BIT 0xfa
0000            443   _NSSMD1         BIT 0xfb
0000            444   _RXOVRN         BIT 0xfc
0000            445   _MODF           BIT 0xfd
0000            446   _WCOL           BIT 0xfe
0000            447   _SPIF           BIT 0xff
0000            448   _IT0            BIT 0x88
0000            449   _IE0            BIT 0x89
0000            450   _IT1            BIT 0x8a
0000            451   _IE1            BIT 0x8b
0000            452   _TR0            BIT 0x8c
0000            453   _TF0            BIT 0x8d
0000            454   _TR1            BIT 0x8e
0000            455   _TF1            BIT 0x8f
0000            456   _T2XCLK0        BIT 0xc8
0000            457   _T2XCLK1        BIT 0xc9
0000            458   _TR2            BIT 0xca
0000            459   _T2SPLIT        BIT 0xcb
0000            460   _TF2CEN         BIT 0xcc
0000            461   _TF2LEN         BIT 0xcd
0000            462   _TF2L           BIT 0xce
0000            463   _TF2H           BIT 0xcf
0000            464   _T4XCLK0        BIT 0x98
0000            465   _T4XCLK1        BIT 0x99
0000            466   _TR4            BIT 0x9a
0000            467   _T4SPLIT        BIT 0x9b
0000            468   _TF4CEN         BIT 0x9c
0000            469   _TF4LEN         BIT 0x9d
0000            470   _TF4L           BIT 0x9e
0000            471   _TF4H           BIT 0x9f
0000            472   _T5XCLK0        BIT 0xc0
0000            473   _T5XCLK1        BIT 0xc1
0000            474   _TR5            BIT 0xc2
0000            475   _T5SPLIT        BIT 0xc3
0000            476   _TF5CEN         BIT 0xc4
0000            477   _TF5LEN         BIT 0xc5
0000            478   _TF5L           BIT 0xc6
0000            479   _TF5H           BIT 0xc7
0000            480   _RIE            BIT 0xd8
0000            481   _RXTO0          BIT 0xd9
0000            482   _RXTO1          BIT 0xda
0000            483   _RFRQ           BIT 0xdb
0000            484   _TIE            BIT 0xdc
0000            485   _TXHOLD         BIT 0xdd
0000            486   _TXNF1          BIT 0xde
0000            487   _TFRQ           BIT 0xdf
0000            488   ;--------------------------------------------------------
0000            489   ; overlayable register banks
0000            490   ;--------------------------------------------------------
0000            491            rbank0 segment data overlay
0000            492   ;--------------------------------------------------------
0000            493   ; internal ram data
0000            494   ;--------------------------------------------------------
0000            495            rseg R_DSEG
0000            496   _main_X_pos_L_1_107:
0000            497            ds 4
0004            498   _main_X_pos_L_string_1_107:
0004            499            ds 5
0009            500   ;--------------------------------------------------------
0009            501   ; overlayable items in internal ram 
0009            502   ;--------------------------------------------------------
0000            503            rseg    R_OSEG
0000            504   _InitPinADC_PARM_2:
0000            505            ds 1
0001            506            rseg    R_OSEG
0001            507            rseg    R_OSEG
0001            508            rseg    R_OSEG
0001            509            rseg    R_OSEG
0001            510   ;--------------------------------------------------------
0001            511   ; indirectly addressable internal ram data
0001            512   ;--------------------------------------------------------
0000            513            rseg R_ISEG
0000            514   _buff:
0000            515            ds 20
0014            516   ;--------------------------------------------------------
0014            517   ; absolute internal ram data
0014            518   ;--------------------------------------------------------
0000            519            DSEG
0000            520   ;--------------------------------------------------------
0000            521   ; bit data
0000            522   ;--------------------------------------------------------
0000            523            rseg R_BSEG
0000            524   ;--------------------------------------------------------
0000            525   ; paged external ram data
0000            526   ;--------------------------------------------------------
0000            527            rseg R_PSEG
0000            528   ;--------------------------------------------------------
0000            529   ; external ram data
0000            530   ;--------------------------------------------------------
0000            531            rseg R_XSEG
0000            532   ;--------------------------------------------------------
0000            533   ; absolute external ram data
0000            534   ;--------------------------------------------------------
0000            535            XSEG
0000            536   ;--------------------------------------------------------
0000            537   ; external initialized ram data
0000            538   ;--------------------------------------------------------
0000            539            rseg R_IXSEG
0000            540            rseg R_HOME
0000            541            rseg R_GSINIT
0000            542            rseg R_CSEG
0000            543   ;--------------------------------------------------------
0000            544   ; Reset entry point and interrupt vectors
0000            545   ;--------------------------------------------------------
0000            546            CSEG at 0x0000
0000 020000     547            ljmp    _crt0
0003            548   ;--------------------------------------------------------
0003            549   ; global & static initialisations
0003            550   ;--------------------------------------------------------
0000            551            rseg R_HOME
0000            552            rseg R_GSINIT
0000            553            rseg R_GSINIT
0000            554   ;--------------------------------------------------------
0000            555   ; data variables initialization
0000            556   ;--------------------------------------------------------
0000            557            rseg R_DINIT
0000            558            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            559   ;--------------------------------------------------------
0000            560   ; code
0000            561   ;--------------------------------------------------------
0000            562            rseg R_CSEG
0000            563   ;------------------------------------------------------------
0000            564   ;Allocation info for local variables in function '_c51_external_startup'
0000            565   ;------------------------------------------------------------
0000            566   ;------------------------------------------------------------
0000            567   ;        EFM8_JDY40_Transmitter.c:12: char _c51_external_startup (void)
0000            568   ;        -----------------------------------------
0000            569   ;         function _c51_external_startup
0000            570   ;        -----------------------------------------
0000            571   __c51_external_startup:
0000            572            using   0
0000            573   ;        EFM8_JDY40_Transmitter.c:15: SFRPAGE = 0x00;
0000 75A700     574            mov     _SFRPAGE,#0x00
0003            575   ;        EFM8_JDY40_Transmitter.c:16: WDTCN = 0xDE; //First key
0003 7597DE     576            mov     _WDTCN,#0xDE
0006            577   ;        EFM8_JDY40_Transmitter.c:17: WDTCN = 0xAD; //Second key
0006 7597AD     578            mov     _WDTCN,#0xAD
0009            579   ;        EFM8_JDY40_Transmitter.c:19: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     580            mov     _VDM0CN,#0x80
000C            581   ;        EFM8_JDY40_Transmitter.c:20: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     582            mov     _RSTSRC,#0x06
000F            583   ;        EFM8_JDY40_Transmitter.c:27: SFRPAGE = 0x10;
000F 75A710     584            mov     _SFRPAGE,#0x10
0012            585   ;        EFM8_JDY40_Transmitter.c:28: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     586            mov     _PFE0CN,#0x20
0015            587   ;        EFM8_JDY40_Transmitter.c:29: SFRPAGE = 0x00;
0015 75A700     588            mov     _SFRPAGE,#0x00
0018            589   ;        EFM8_JDY40_Transmitter.c:50: CLKSEL = 0x00;
0018 75A900     590            mov     _CLKSEL,#0x00
001B            591   ;        EFM8_JDY40_Transmitter.c:51: CLKSEL = 0x00;
001B 75A900     592            mov     _CLKSEL,#0x00
001E            593   ;        EFM8_JDY40_Transmitter.c:52: while ((CLKSEL & 0x80) == 0);
001E            594   L002001?:
001E E5A9       595            mov     a,_CLKSEL
0020 30E730     596            jnb     acc.7,L002001?
0023            597   ;        EFM8_JDY40_Transmitter.c:53: CLKSEL = 0x03;
0023 75A903     598            mov     _CLKSEL,#0x03
0026            599   ;        EFM8_JDY40_Transmitter.c:54: CLKSEL = 0x03;
0026 75A903     600            mov     _CLKSEL,#0x03
0029            601   ;        EFM8_JDY40_Transmitter.c:55: while ((CLKSEL & 0x80) == 0);
0029            602   L002004?:
0029 E5A9       603            mov     a,_CLKSEL
002B 30E7B0     604            jnb     acc.7,L002004?
002E            605   ;        EFM8_JDY40_Transmitter.c:60: P0MDOUT |= 0x11; // Enable UART0 TX (P0.4) and UART1 TX (P0.0) as push-pull outputs
002E 43A411     606            orl     _P0MDOUT,#0x11
0031            607   ;        EFM8_JDY40_Transmitter.c:61: P2MDOUT |= 0x01; // P2.0 in push-pull mode
0031 43A601     608            orl     _P2MDOUT,#0x01
0034            609   ;        EFM8_JDY40_Transmitter.c:62: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0034 75E101     610            mov     _XBR0,#0x01
0037            611   ;        EFM8_JDY40_Transmitter.c:63: XBR1     = 0X00;
0037 75E200     612            mov     _XBR1,#0x00
003A            613   ;        EFM8_JDY40_Transmitter.c:64: XBR2     = 0x41; // Enable crossbar and uart 1
003A 75E341     614            mov     _XBR2,#0x41
003D            615   ;        EFM8_JDY40_Transmitter.c:70: SCON0 = 0x10;
003D 759810     616            mov     _SCON0,#0x10
0040            617   ;        EFM8_JDY40_Transmitter.c:71: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
0040 758DE6     618            mov     _TH1,#0xE6
0043            619   ;        EFM8_JDY40_Transmitter.c:72: TL1 = TH1;      // Init Timer1
0043 858D8B     620            mov     _TL1,_TH1
0046            621   ;        EFM8_JDY40_Transmitter.c:73: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0046 53890F     622            anl     _TMOD,#0x0F
0049            623   ;        EFM8_JDY40_Transmitter.c:74: TMOD |=  0x20;                       
0049 438920     624            orl     _TMOD,#0x20
004C            625   ;        EFM8_JDY40_Transmitter.c:75: TR1 = 1; // START Timer1
004C D28E       626            setb    _TR1
004E            627   ;        EFM8_JDY40_Transmitter.c:76: TI = 1;  // Indicate TX0 ready
004E D299       628            setb    _TI
0050            629   ;        EFM8_JDY40_Transmitter.c:78: return 0;
0050 758200     630            mov     dpl,#0x00
0053 22         631            ret
0054            632   ;------------------------------------------------------------
0054            633   ;Allocation info for local variables in function 'InitADC'
0054            634   ;------------------------------------------------------------
0054            635   ;------------------------------------------------------------
0054            636   ;        EFM8_JDY40_Transmitter.c:81: void InitADC (void)
0054            637   ;        -----------------------------------------
0054            638   ;         function InitADC
0054            639   ;        -----------------------------------------
0054            640   _InitADC:
0054            641   ;        EFM8_JDY40_Transmitter.c:83: SFRPAGE = 0x00;
0054 75A700     642            mov     _SFRPAGE,#0x00
0057            643   ;        EFM8_JDY40_Transmitter.c:84: ADEN=0; // Disable ADC
0057 C2EF       644            clr     _ADEN
0059            645   ;        EFM8_JDY40_Transmitter.c:89: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0059 75B280     646            mov     _ADC0CN1,#0x80
005C            647   ;        EFM8_JDY40_Transmitter.c:93: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
005C 75BC20     648            mov     _ADC0CF0,#0x20
005F            649   ;        EFM8_JDY40_Transmitter.c:97: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005F 75B91E     650            mov     _ADC0CF1,#0x1E
0062            651   ;        EFM8_JDY40_Transmitter.c:106: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
0062 75E800     652            mov     _ADC0CN0,#0x00
0065            653   ;        EFM8_JDY40_Transmitter.c:111: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0065 75DF3F     654            mov     _ADC0CF2,#0x3F
0068            655   ;        EFM8_JDY40_Transmitter.c:115: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0068 75B300     656            mov     _ADC0CN2,#0x00
006B            657   ;        EFM8_JDY40_Transmitter.c:117: ADEN=1; // Enable ADC
006B D2EF       658            setb    _ADEN
006D 22         659            ret
006E            660   ;------------------------------------------------------------
006E            661   ;Allocation info for local variables in function 'TIMER0_Init'
006E            662   ;------------------------------------------------------------
006E            663   ;------------------------------------------------------------
006E            664   ;        EFM8_JDY40_Transmitter.c:120: void TIMER0_Init(void)
006E            665   ;        -----------------------------------------
006E            666   ;         function TIMER0_Init
006E            667   ;        -----------------------------------------
006E            668   _TIMER0_Init:
006E            669   ;        EFM8_JDY40_Transmitter.c:122: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
006E 5389F0     670            anl     _TMOD,#0xF0
0071            671   ;        EFM8_JDY40_Transmitter.c:123: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0071 438901     672            orl     _TMOD,#0x01
0074            673   ;        EFM8_JDY40_Transmitter.c:124: TR0=0; // Stop Timer/Counter 0
0074 C28C       674            clr     _TR0
0076 22         675            ret
0077            676   ;------------------------------------------------------------
0077            677   ;Allocation info for local variables in function 'InitPinADC'
0077            678   ;------------------------------------------------------------
0077            679   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
0077            680   ;portno                    Allocated to registers r2 
0077            681   ;mask                      Allocated to registers r3 
0077            682   ;------------------------------------------------------------
0077            683   ;        EFM8_JDY40_Transmitter.c:129: void InitPinADC (unsigned char portno, unsigned char pinno)
0077            684   ;        -----------------------------------------
0077            685   ;         function InitPinADC
0077            686   ;        -----------------------------------------
0077            687   _InitPinADC:
0077 AA82       688            mov     r2,dpl
0079            689   ;        EFM8_JDY40_Transmitter.c:133: mask=1<<pinno;
0079 8560F0     690            mov     b,_InitPinADC_PARM_2
007C 05F0       691            inc     b
007E 7401       692            mov     a,#0x01
0080 8000       693            sjmp    L005013?
0082            694   L005011?:
0082 25E0       695            add     a,acc
0084            696   L005013?:
0084 D5F0B0     697            djnz    b,L005011?
0087 FB         698            mov     r3,a
0088            699   ;        EFM8_JDY40_Transmitter.c:135: SFRPAGE = 0x20;
0088 75A720     700            mov     _SFRPAGE,#0x20
008B            701   ;        EFM8_JDY40_Transmitter.c:136: switch (portno)
008B BA00F0     702            cjne    r2,#0x00,L005014?
008E 8000       703            sjmp    L005001?
0090            704   L005014?:
0090 BA0170     705            cjne    r2,#0x01,L005015?
0093 8000       706            sjmp    L005002?
0095            707   L005015?:
0095            708   ;        EFM8_JDY40_Transmitter.c:138: case 0:
0095 BA02F0     709            cjne    r2,#0x02,L005005?
0098 8000       710            sjmp    L005003?
009A            711   L005001?:
009A            712   ;        EFM8_JDY40_Transmitter.c:139: P0MDIN &= (~mask); // Set pin as analog input
009A EB         713            mov     a,r3
009B F4         714            cpl     a
009C FA         715            mov     r2,a
009D 52F1       716            anl     _P0MDIN,a
009F            717   ;        EFM8_JDY40_Transmitter.c:140: P0SKIP |= mask; // Skip Crossbar decoding for this pin
009F EB         718            mov     a,r3
00A0 42D4       719            orl     _P0SKIP,a
00A2            720   ;        EFM8_JDY40_Transmitter.c:141: break;
00A2            721   ;        EFM8_JDY40_Transmitter.c:142: case 1:
00A2 8000       722            sjmp    L005005?
00A4            723   L005002?:
00A4            724   ;        EFM8_JDY40_Transmitter.c:143: P1MDIN &= (~mask); // Set pin as analog input
00A4 EB         725            mov     a,r3
00A5 F4         726            cpl     a
00A6 FA         727            mov     r2,a
00A7 52F2       728            anl     _P1MDIN,a
00A9            729   ;        EFM8_JDY40_Transmitter.c:144: P1SKIP |= mask; // Skip Crossbar decoding for this pin
00A9 EB         730            mov     a,r3
00AA 42D5       731            orl     _P1SKIP,a
00AC            732   ;        EFM8_JDY40_Transmitter.c:145: break;
00AC            733   ;        EFM8_JDY40_Transmitter.c:146: case 2:
00AC 8000       734            sjmp    L005005?
00AE            735   L005003?:
00AE            736   ;        EFM8_JDY40_Transmitter.c:147: P2MDIN &= (~mask); // Set pin as analog input
00AE EB         737            mov     a,r3
00AF F4         738            cpl     a
00B0 FA         739            mov     r2,a
00B1 52F3       740            anl     _P2MDIN,a
00B3            741   ;        EFM8_JDY40_Transmitter.c:148: P2SKIP |= mask; // Skip Crossbar decoding for this pin
00B3 EB         742            mov     a,r3
00B4 42CC       743            orl     _P2SKIP,a
00B6            744   ;        EFM8_JDY40_Transmitter.c:152: }
00B6            745   L005005?:
00B6            746   ;        EFM8_JDY40_Transmitter.c:153: SFRPAGE = 0x00;
00B6 75A700     747            mov     _SFRPAGE,#0x00
00B9 22         748            ret
00BA            749   ;------------------------------------------------------------
00BA            750   ;Allocation info for local variables in function 'Get_ADC'
00BA            751   ;------------------------------------------------------------
00BA            752   ;------------------------------------------------------------
00BA            753   ;        EFM8_JDY40_Transmitter.c:156: unsigned int Get_ADC (void)
00BA            754   ;        -----------------------------------------
00BA            755   ;         function Get_ADC
00BA            756   ;        -----------------------------------------
00BA            757   _Get_ADC:
00BA            758   ;        EFM8_JDY40_Transmitter.c:158: ADINT = 0;
00BA C2ED       759            clr     _ADINT
00BC            760   ;        EFM8_JDY40_Transmitter.c:159: ADBUSY = 1;
00BC D2EC       761            setb    _ADBUSY
00BE            762   ;        EFM8_JDY40_Transmitter.c:160: while (!ADINT); // Wait for conversion to complete
00BE            763   L006001?:
00BE 30ED70     764            jnb     _ADINT,L006001?
00C1            765   ;        EFM8_JDY40_Transmitter.c:161: return (ADC0);
00C1 85BD82     766            mov     dpl,_ADC0
00C4 85BE83     767            mov     dph,(_ADC0 >> 8)
00C7 22         768            ret
00C8            769   ;------------------------------------------------------------
00C8            770   ;Allocation info for local variables in function 'ADC_at_Pin'
00C8            771   ;------------------------------------------------------------
00C8            772   ;pin                       Allocated to registers 
00C8            773   ;------------------------------------------------------------
00C8            774   ;        EFM8_JDY40_Transmitter.c:164: unsigned int ADC_at_Pin(unsigned char pin)
00C8            775   ;        -----------------------------------------
00C8            776   ;         function ADC_at_Pin
00C8            777   ;        -----------------------------------------
00C8            778   _ADC_at_Pin:
00C8 8582BB     779            mov     _ADC0MX,dpl
00CB            780   ;        EFM8_JDY40_Transmitter.c:167: ADINT = 0;
00CB C2ED       781            clr     _ADINT
00CD            782   ;        EFM8_JDY40_Transmitter.c:168: ADBUSY = 1;     // Convert voltage at the pin
00CD D2EC       783            setb    _ADBUSY
00CF            784   ;        EFM8_JDY40_Transmitter.c:169: while (!ADINT); // Wait for conversion to complete
00CF            785   L007001?:
00CF 30EDF0     786            jnb     _ADINT,L007001?
00D2            787   ;        EFM8_JDY40_Transmitter.c:170: return (ADC0);
00D2 85BD82     788            mov     dpl,_ADC0
00D5 85BE83     789            mov     dph,(_ADC0 >> 8)
00D8 22         790            ret
00D9            791   ;------------------------------------------------------------
00D9            792   ;Allocation info for local variables in function 'Volts_at_Pin'
00D9            793   ;------------------------------------------------------------
00D9            794   ;pin                       Allocated to registers r2 
00D9            795   ;------------------------------------------------------------
00D9            796   ;        EFM8_JDY40_Transmitter.c:173: float Volts_at_Pin(unsigned char pin)
00D9            797   ;        -----------------------------------------
00D9            798   ;         function Volts_at_Pin
00D9            799   ;        -----------------------------------------
00D9            800   _Volts_at_Pin:
00D9            801   ;        EFM8_JDY40_Transmitter.c:175: return ((ADC_at_Pin(pin)*VDD)/16383.0);
00D9 120000     802            lcall   _ADC_at_Pin
00DC 120000     803            lcall   ___uint2fs
00DF AA82       804            mov     r2,dpl
00E1 AB83       805            mov     r3,dph
00E3 ACF0       806            mov     r4,b
00E5 FD         807            mov     r5,a
00E6 C002       808            push    ar2
00E8 C003       809            push    ar3
00EA C004       810            push    ar4
00EC C005       811            push    ar5
00EE 900000     812            mov     dptr,#0x0000
00F1 75F0A0     813            mov     b,#0xA0
00F4 7440       814            mov     a,#0x40
00F6 120000     815            lcall   ___fsmul
00F9 AA82       816            mov     r2,dpl
00FB AB83       817            mov     r3,dph
00FD ACF0       818            mov     r4,b
00FF FD         819            mov     r5,a
0100 E581       820            mov     a,sp
0102 24FC       821            add     a,#0xfc
0104 F581       822            mov     sp,a
0106 E4         823            clr     a
0107 C0E0       824            push    acc
0109 74FC       825            mov     a,#0xFC
010B C0E0       826            push    acc
010D 747F       827            mov     a,#0x7F
010F C0E0       828            push    acc
0111 7446       829            mov     a,#0x46
0113 C0E0       830            push    acc
0115 8A82       831            mov     dpl,r2
0117 8B83       832            mov     dph,r3
0119 8CF0       833            mov     b,r4
011B ED         834            mov     a,r5
011C 120000     835            lcall   ___fsdiv
011F AA82       836            mov     r2,dpl
0121 AB83       837            mov     r3,dph
0123 ACF0       838            mov     r4,b
0125 FD         839            mov     r5,a
0126 E581       840            mov     a,sp
0128 24FC       841            add     a,#0xfc
012A F581       842            mov     sp,a
012C 8A82       843            mov     dpl,r2
012E 8B83       844            mov     dph,r3
0130 8CF0       845            mov     b,r4
0132 ED         846            mov     a,r5
0133 22         847            ret
0134            848   ;------------------------------------------------------------
0134            849   ;Allocation info for local variables in function 'Timer3us'
0134            850   ;------------------------------------------------------------
0134            851   ;us                        Allocated to registers r2 
0134            852   ;i                         Allocated to registers r3 
0134            853   ;------------------------------------------------------------
0134            854   ;        EFM8_JDY40_Transmitter.c:179: void Timer3us(unsigned char us)
0134            855   ;        -----------------------------------------
0134            856   ;         function Timer3us
0134            857   ;        -----------------------------------------
0134            858   _Timer3us:
0134 AA82       859            mov     r2,dpl
0136            860   ;        EFM8_JDY40_Transmitter.c:184: CKCON0|=0b_0100_0000;
0136 438E40     861            orl     _CKCON0,#0x40
0139            862   ;        EFM8_JDY40_Transmitter.c:186: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0139 7592B8     863            mov     _TMR3RL,#0xB8
013C 7593FF     864            mov     (_TMR3RL >> 8),#0xFF
013F            865   ;        EFM8_JDY40_Transmitter.c:187: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
013F 859294     866            mov     _TMR3,_TMR3RL
0142 859395     867            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
0145            868   ;        EFM8_JDY40_Transmitter.c:189: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
0145 759104     869            mov     _TMR3CN0,#0x04
0148            870   ;        EFM8_JDY40_Transmitter.c:190: for (i = 0; i < us; i++)       // Count <us> overflows
0148 7B00       871            mov     r3,#0x00
014A            872   L009004?:
014A C3         873            clr     c
014B EB         874            mov     a,r3
014C 9A         875            subb    a,r2
014D 5000       876            jnc     L009007?
014F            877   ;        EFM8_JDY40_Transmitter.c:192: while (!(TMR3CN0 & 0x80));  // Wait for overflow
014F            878   L009001?:
014F E591       879            mov     a,_TMR3CN0
0151 30E7B0     880            jnb     acc.7,L009001?
0154            881   ;        EFM8_JDY40_Transmitter.c:193: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
0154 53917F     882            anl     _TMR3CN0,#0x7F
0157            883   ;        EFM8_JDY40_Transmitter.c:190: for (i = 0; i < us; i++)       // Count <us> overflows
0157 0B         884            inc     r3
0158 8000       885            sjmp    L009004?
015A            886   L009007?:
015A            887   ;        EFM8_JDY40_Transmitter.c:195: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
015A 759100     888            mov     _TMR3CN0,#0x00
015D 22         889            ret
015E            890   ;------------------------------------------------------------
015E            891   ;Allocation info for local variables in function 'waitms'
015E            892   ;------------------------------------------------------------
015E            893   ;ms                        Allocated to registers r2 r3 
015E            894   ;j                         Allocated to registers r4 r5 
015E            895   ;k                         Allocated to registers r6 
015E            896   ;------------------------------------------------------------
015E            897   ;        EFM8_JDY40_Transmitter.c:198: void waitms (unsigned int ms)
015E            898   ;        -----------------------------------------
015E            899   ;         function waitms
015E            900   ;        -----------------------------------------
015E            901   _waitms:
015E AA82       902            mov     r2,dpl
0160 AB83       903            mov     r3,dph
0162            904   ;        EFM8_JDY40_Transmitter.c:202: for(j=0; j<ms; j++)
0162 7C00       905            mov     r4,#0x00
0164 7D00       906            mov     r5,#0x00
0166            907   L010005?:
0166 C3         908            clr     c
0167 EC         909            mov     a,r4
0168 9A         910            subb    a,r2
0169 ED         911            mov     a,r5
016A 9B         912            subb    a,r3
016B 5000       913            jnc     L010009?
016D            914   ;        EFM8_JDY40_Transmitter.c:203: for (k=0; k<4; k++) Timer3us(250);
016D 7E00       915            mov     r6,#0x00
016F            916   L010001?:
016F BE04B0     917            cjne    r6,#0x04,L010018?
0172            918   L010018?:
0172 5000       919            jnc     L010007?
0174 7582FA     920            mov     dpl,#0xFA
0177 C002       921            push    ar2
0179 C003       922            push    ar3
017B C004       923            push    ar4
017D C005       924            push    ar5
017F C006       925            push    ar6
0181 120000     926            lcall   _Timer3us
0184 D006       927            pop     ar6
0186 D005       928            pop     ar5
0188 D004       929            pop     ar4
018A D003       930            pop     ar3
018C D002       931            pop     ar2
018E 0E         932            inc     r6
018F 8000       933            sjmp    L010001?
0191            934   L010007?:
0191            935   ;        EFM8_JDY40_Transmitter.c:202: for(j=0; j<ms; j++)
0191 0C         936            inc     r4
0192 BC00F0     937            cjne    r4,#0x00,L010005?
0195 0D         938            inc     r5
0196 8000       939            sjmp    L010005?
0198            940   L010009?:
0198 22         941            ret
0199            942   ;------------------------------------------------------------
0199            943   ;Allocation info for local variables in function 'UART1_Init'
0199            944   ;------------------------------------------------------------
0199            945   ;baudrate                  Allocated to registers r2 r3 r4 r5 
0199            946   ;------------------------------------------------------------
0199            947   ;        EFM8_JDY40_Transmitter.c:206: void UART1_Init (unsigned long baudrate)
0199            948   ;        -----------------------------------------
0199            949   ;         function UART1_Init
0199            950   ;        -----------------------------------------
0199            951   _UART1_Init:
0199 AA82       952            mov     r2,dpl
019B AB83       953            mov     r3,dph
019D ACF0       954            mov     r4,b
019F FD         955            mov     r5,a
01A0            956   ;        EFM8_JDY40_Transmitter.c:208: SFRPAGE = 0x20;
01A0 75A720     957            mov     _SFRPAGE,#0x20
01A3            958   ;        EFM8_JDY40_Transmitter.c:209: SMOD1 = 0x0C; // no parity, 8 data bits, 1 stop bit
01A3 75930C     959            mov     _SMOD1,#0x0C
01A6            960   ;        EFM8_JDY40_Transmitter.c:210: SCON1 = 0x10;
01A6 75C810     961            mov     _SCON1,#0x10
01A9            962   ;        EFM8_JDY40_Transmitter.c:211: SBCON1 =0x00;   // disable baud rate generator
01A9 759400     963            mov     _SBCON1,#0x00
01AC            964   ;        EFM8_JDY40_Transmitter.c:212: SBRL1 = 0x10000L-((SYSCLK/baudrate)/(12L*2L));
01AC 8A00       965            mov     __divulong_PARM_2,r2
01AE 8B01       966            mov     (__divulong_PARM_2 + 1),r3
01B0 8C02       967            mov     (__divulong_PARM_2 + 2),r4
01B2 8D03       968            mov     (__divulong_PARM_2 + 3),r5
01B4 90A200     969            mov     dptr,#0xA200
01B7 75F04A     970            mov     b,#0x4A
01BA 7404       971            mov     a,#0x04
01BC 120000     972            lcall   __divulong
01BF AA82       973            mov     r2,dpl
01C1 AB83       974            mov     r3,dph
01C3 ACF0       975            mov     r4,b
01C5 FD         976            mov     r5,a
01C6 750018     977            mov     __divulong_PARM_2,#0x18
01C9 E4         978            clr     a
01CA F501       979            mov     (__divulong_PARM_2 + 1),a
01CC F502       980            mov     (__divulong_PARM_2 + 2),a
01CE F503       981            mov     (__divulong_PARM_2 + 3),a
01D0 8A82       982            mov     dpl,r2
01D2 8B83       983            mov     dph,r3
01D4 8CF0       984            mov     b,r4
01D6 ED         985            mov     a,r5
01D7 120000     986            lcall   __divulong
01DA AA82       987            mov     r2,dpl
01DC AB83       988            mov     r3,dph
01DE ACF0       989            mov     r4,b
01E0 FD         990            mov     r5,a
01E1 E4         991            clr     a
01E2 C3         992            clr     c
01E3 9A         993            subb    a,r2
01E4 FA         994            mov     r2,a
01E5 E4         995            clr     a
01E6 9B         996            subb    a,r3
01E7 FB         997            mov     r3,a
01E8 7401       998            mov     a,#0x01
01EA 9C         999            subb    a,r4
01EB E4        1000            clr     a
01EC 9D        1001            subb    a,r5
01ED 8A95      1002            mov     _SBRL1,r2
01EF 8B96      1003            mov     (_SBRL1 >> 8),r3
01F1           1004   ;        EFM8_JDY40_Transmitter.c:213: TI1 = 1; // indicate ready for TX
01F1 D2C9      1005            setb    _TI1
01F3           1006   ;        EFM8_JDY40_Transmitter.c:214: SBCON1 |= 0x40;   // enable baud rate generator
01F3 439440    1007            orl     _SBCON1,#0x40
01F6           1008   ;        EFM8_JDY40_Transmitter.c:215: SFRPAGE = 0x00;
01F6 75A700    1009            mov     _SFRPAGE,#0x00
01F9 22        1010            ret
01FA           1011   ;------------------------------------------------------------
01FA           1012   ;Allocation info for local variables in function 'putchar1'
01FA           1013   ;------------------------------------------------------------
01FA           1014   ;c                         Allocated to registers r2 
01FA           1015   ;------------------------------------------------------------
01FA           1016   ;        EFM8_JDY40_Transmitter.c:218: void putchar1 (char c) 
01FA           1017   ;        -----------------------------------------
01FA           1018   ;         function putchar1
01FA           1019   ;        -----------------------------------------
01FA           1020   _putchar1:
01FA AA82      1021            mov     r2,dpl
01FC           1022   ;        EFM8_JDY40_Transmitter.c:220: SFRPAGE = 0x20;
01FC 75A720    1023            mov     _SFRPAGE,#0x20
01FF           1024   ;        EFM8_JDY40_Transmitter.c:221: while (!TI1);
01FF           1025   L012001?:
01FF           1026   ;        EFM8_JDY40_Transmitter.c:222: TI1=0;
01FF 10C900    1027            jbc     _TI1,L012008?
0202 8000      1028            sjmp    L012001?
0204           1029   L012008?:
0204           1030   ;        EFM8_JDY40_Transmitter.c:223: SBUF1 = c;
0204 8A92      1031            mov     _SBUF1,r2
0206           1032   ;        EFM8_JDY40_Transmitter.c:224: SFRPAGE = 0x00;
0206 75A700    1033            mov     _SFRPAGE,#0x00
0209 22        1034            ret
020A           1035   ;------------------------------------------------------------
020A           1036   ;Allocation info for local variables in function 'sendstr1'
020A           1037   ;------------------------------------------------------------
020A           1038   ;s                         Allocated to registers r2 r3 r4 
020A           1039   ;------------------------------------------------------------
020A           1040   ;        EFM8_JDY40_Transmitter.c:227: void sendstr1 (char * s)
020A           1041   ;        -----------------------------------------
020A           1042   ;         function sendstr1
020A           1043   ;        -----------------------------------------
020A           1044   _sendstr1:
020A AA82      1045            mov     r2,dpl
020C AB83      1046            mov     r3,dph
020E ACF0      1047            mov     r4,b
0210           1048   ;        EFM8_JDY40_Transmitter.c:229: while(*s)
0210           1049   L013001?:
0210 8A82      1050            mov     dpl,r2
0212 8B83      1051            mov     dph,r3
0214 8CF0      1052            mov     b,r4
0216 120000    1053            lcall   __gptrget
0219 FD        1054            mov     r5,a
021A 6000      1055            jz      L013004?
021C           1056   ;        EFM8_JDY40_Transmitter.c:231: putchar1(*s);
021C 8D82      1057            mov     dpl,r5
021E C002      1058            push    ar2
0220 C003      1059            push    ar3
0222 C004      1060            push    ar4
0224 120000    1061            lcall   _putchar1
0227 D004      1062            pop     ar4
0229 D003      1063            pop     ar3
022B D002      1064            pop     ar2
022D           1065   ;        EFM8_JDY40_Transmitter.c:232: s++;      
022D 0A        1066            inc     r2
022E BA0040    1067            cjne    r2,#0x00,L013001?
0231 0B        1068            inc     r3
0232 8000      1069            sjmp    L013001?
0234           1070   L013004?:
0234 22        1071            ret
0235           1072   ;------------------------------------------------------------
0235           1073   ;Allocation info for local variables in function 'getchar1'
0235           1074   ;------------------------------------------------------------
0235           1075   ;c                         Allocated to registers 
0235           1076   ;------------------------------------------------------------
0235           1077   ;        EFM8_JDY40_Transmitter.c:236: char getchar1 (void)
0235           1078   ;        -----------------------------------------
0235           1079   ;         function getchar1
0235           1080   ;        -----------------------------------------
0235           1081   _getchar1:
0235           1082   ;        EFM8_JDY40_Transmitter.c:239: SFRPAGE = 0x20;
0235 75A720    1083            mov     _SFRPAGE,#0x20
0238           1084   ;        EFM8_JDY40_Transmitter.c:240: while (!RI1);
0238           1085   L014001?:
0238           1086   ;        EFM8_JDY40_Transmitter.c:241: RI1=0;
0238 10C840    1087            jbc     _RI1,L014008?
023B 8000      1088            sjmp    L014001?
023D           1089   L014008?:
023D           1090   ;        EFM8_JDY40_Transmitter.c:243: SCON1&=0b_0011_1111;
023D 53C83F    1091            anl     _SCON1,#0x3F
0240           1092   ;        EFM8_JDY40_Transmitter.c:244: c = SBUF1;
0240 859282    1093            mov     dpl,_SBUF1
0243           1094   ;        EFM8_JDY40_Transmitter.c:245: SFRPAGE = 0x00;
0243 75A700    1095            mov     _SFRPAGE,#0x00
0246           1096   ;        EFM8_JDY40_Transmitter.c:246: return (c);
0246 22        1097            ret
0247           1098   ;------------------------------------------------------------
0247           1099   ;Allocation info for local variables in function 'getchar1_with_timeout'
0247           1100   ;------------------------------------------------------------
0247           1101   ;c                         Allocated to registers 
0247           1102   ;timeout                   Allocated to registers r2 r3 
0247           1103   ;------------------------------------------------------------
0247           1104   ;        EFM8_JDY40_Transmitter.c:249: char getchar1_with_timeout (void)
0247           1105   ;        -----------------------------------------
0247           1106   ;         function getchar1_with_timeout
0247           1107   ;        -----------------------------------------
0247           1108   _getchar1_with_timeout:
0247           1109   ;        EFM8_JDY40_Transmitter.c:253: SFRPAGE = 0x20;
0247 75A720    1110            mov     _SFRPAGE,#0x20
024A           1111   ;        EFM8_JDY40_Transmitter.c:255: while (!RI1)
024A 7A00      1112            mov     r2,#0x00
024C 7B00      1113            mov     r3,#0x00
024E           1114   L015003?:
024E 20C8C0    1115            jb      _RI1,L015005?
0251           1116   ;        EFM8_JDY40_Transmitter.c:257: SFRPAGE = 0x00;
0251 75A700    1117            mov     _SFRPAGE,#0x00
0254           1118   ;        EFM8_JDY40_Transmitter.c:258: Timer3us(20);
0254 758214    1119            mov     dpl,#0x14
0257 C002      1120            push    ar2
0259 C003      1121            push    ar3
025B 120000    1122            lcall   _Timer3us
025E D003      1123            pop     ar3
0260 D002      1124            pop     ar2
0262           1125   ;        EFM8_JDY40_Transmitter.c:259: SFRPAGE = 0x20;
0262 75A720    1126            mov     _SFRPAGE,#0x20
0265           1127   ;        EFM8_JDY40_Transmitter.c:260: timeout++;
0265 0A        1128            inc     r2
0266 BA0000    1129            cjne    r2,#0x00,L015012?
0269 0B        1130            inc     r3
026A           1131   L015012?:
026A           1132   ;        EFM8_JDY40_Transmitter.c:261: if(timeout==25000)
026A BAA880    1133            cjne    r2,#0xA8,L015003?
026D BB6180    1134            cjne    r3,#0x61,L015003?
0270           1135   ;        EFM8_JDY40_Transmitter.c:263: SFRPAGE = 0x00;
0270 75A700    1136            mov     _SFRPAGE,#0x00
0273           1137   ;        EFM8_JDY40_Transmitter.c:264: return ('\n'); // Timeout after half second
0273 75820A    1138            mov     dpl,#0x0A
0276 22        1139            ret
0277           1140   L015005?:
0277           1141   ;        EFM8_JDY40_Transmitter.c:267: RI1=0;
0277 C2C8      1142            clr     _RI1
0279           1143   ;        EFM8_JDY40_Transmitter.c:269: SCON1&=0b_0011_1111;
0279 53C83F    1144            anl     _SCON1,#0x3F
027C           1145   ;        EFM8_JDY40_Transmitter.c:270: c = SBUF1;
027C 859282    1146            mov     dpl,_SBUF1
027F           1147   ;        EFM8_JDY40_Transmitter.c:271: SFRPAGE = 0x00;
027F 75A700    1148            mov     _SFRPAGE,#0x00
0282           1149   ;        EFM8_JDY40_Transmitter.c:272: return (c);
0282 22        1150            ret
0283           1151   ;------------------------------------------------------------
0283           1152   ;Allocation info for local variables in function 'getstr1'
0283           1153   ;------------------------------------------------------------
0283           1154   ;s                         Allocated to registers r2 r3 r4 
0283           1155   ;c                         Allocated to registers r5 
0283           1156   ;------------------------------------------------------------
0283           1157   ;        EFM8_JDY40_Transmitter.c:275: void getstr1 (char * s)
0283           1158   ;        -----------------------------------------
0283           1159   ;         function getstr1
0283           1160   ;        -----------------------------------------
0283           1161   _getstr1:
0283 AA82      1162            mov     r2,dpl
0285 AB83      1163            mov     r3,dph
0287 ACF0      1164            mov     r4,b
0289           1165   ;        EFM8_JDY40_Transmitter.c:279: while(1)
0289           1166   L016004?:
0289           1167   ;        EFM8_JDY40_Transmitter.c:281: c=getchar1_with_timeout();
0289 C002      1168            push    ar2
028B C003      1169            push    ar3
028D C004      1170            push    ar4
028F 120000    1171            lcall   _getchar1_with_timeout
0292 AD82      1172            mov     r5,dpl
0294 D004      1173            pop     ar4
0296 D003      1174            pop     ar3
0298 D002      1175            pop     ar2
029A           1176   ;        EFM8_JDY40_Transmitter.c:282: if(c=='\n')
029A BD0A80    1177            cjne    r5,#0x0A,L016002?
029D           1178   ;        EFM8_JDY40_Transmitter.c:284: *s=0;
029D 8A82      1179            mov     dpl,r2
029F 8B83      1180            mov     dph,r3
02A1 8CF0      1181            mov     b,r4
02A3 E4        1182            clr     a
02A4           1183   ;        EFM8_JDY40_Transmitter.c:285: return;
02A4 020000    1184            ljmp    __gptrput
02A7           1185   L016002?:
02A7           1186   ;        EFM8_JDY40_Transmitter.c:287: *s=c;
02A7 8A82      1187            mov     dpl,r2
02A9 8B83      1188            mov     dph,r3
02AB 8CF0      1189            mov     b,r4
02AD ED        1190            mov     a,r5
02AE 120000    1191            lcall   __gptrput
02B1 A3        1192            inc     dptr
02B2 AA82      1193            mov     r2,dpl
02B4 AB83      1194            mov     r3,dph
02B6           1195   ;        EFM8_JDY40_Transmitter.c:288: s++;
02B6 8000      1196            sjmp    L016004?
02B8           1197   ;------------------------------------------------------------
02B8           1198   ;Allocation info for local variables in function 'RXU1'
02B8           1199   ;------------------------------------------------------------
02B8           1200   ;------------------------------------------------------------
02B8           1201   ;        EFM8_JDY40_Transmitter.c:293: bit RXU1 (void)
02B8           1202   ;        -----------------------------------------
02B8           1203   ;         function RXU1
02B8           1204   ;        -----------------------------------------
02B8           1205   _RXU1:
02B8           1206   ;        EFM8_JDY40_Transmitter.c:296: SFRPAGE = 0x20;
02B8 75A720    1207            mov     _SFRPAGE,#0x20
02BB           1208   ;        EFM8_JDY40_Transmitter.c:297: mybit=RI1;
02BB A2C8      1209            mov     c,_RI1
02BD           1210   ;        EFM8_JDY40_Transmitter.c:298: SFRPAGE = 0x00;
02BD 75A700    1211            mov     _SFRPAGE,#0x00
02C0           1212   ;        EFM8_JDY40_Transmitter.c:299: return mybit;
02C0 22        1213            ret
02C1           1214   ;------------------------------------------------------------
02C1           1215   ;Allocation info for local variables in function 'waitms_or_RI1'
02C1           1216   ;------------------------------------------------------------
02C1           1217   ;ms                        Allocated to registers r2 r3 
02C1           1218   ;j                         Allocated to registers r4 r5 
02C1           1219   ;k                         Allocated to registers r6 
02C1           1220   ;------------------------------------------------------------
02C1           1221   ;        EFM8_JDY40_Transmitter.c:302: void waitms_or_RI1 (unsigned int ms)
02C1           1222   ;        -----------------------------------------
02C1           1223   ;         function waitms_or_RI1
02C1           1224   ;        -----------------------------------------
02C1           1225   _waitms_or_RI1:
02C1 AA82      1226            mov     r2,dpl
02C3 AB83      1227            mov     r3,dph
02C5           1228   ;        EFM8_JDY40_Transmitter.c:306: for(j=0; j<ms; j++)
02C5 7C00      1229            mov     r4,#0x00
02C7 7D00      1230            mov     r5,#0x00
02C9           1231   L018007?:
02C9 C3        1232            clr     c
02CA EC        1233            mov     a,r4
02CB 9A        1234            subb    a,r2
02CC ED        1235            mov     a,r5
02CD 9B        1236            subb    a,r3
02CE 5000      1237            jnc     L018011?
02D0           1238   ;        EFM8_JDY40_Transmitter.c:308: for (k=0; k<4; k++)
02D0 7E00      1239            mov     r6,#0x00
02D2           1240   L018003?:
02D2 BE04C0    1241            cjne    r6,#0x04,L018019?
02D5           1242   L018019?:
02D5 5000      1243            jnc     L018009?
02D7           1244   ;        EFM8_JDY40_Transmitter.c:310: if(RXU1()) return;
02D7 C002      1245            push    ar2
02D9 C003      1246            push    ar3
02DB C004      1247            push    ar4
02DD C005      1248            push    ar5
02DF C006      1249            push    ar6
02E1 120000    1250            lcall   _RXU1
02E4 E4        1251            clr     a
02E5 33        1252            rlc     a
02E6 D006      1253            pop     ar6
02E8 D005      1254            pop     ar5
02EA D004      1255            pop     ar4
02EC D003      1256            pop     ar3
02EE D002      1257            pop     ar2
02F0 6000      1258            jz      L018002?
02F2 22        1259            ret
02F3           1260   L018002?:
02F3           1261   ;        EFM8_JDY40_Transmitter.c:311: Timer3us(250);
02F3 7582FA    1262            mov     dpl,#0xFA
02F6 C002      1263            push    ar2
02F8 C003      1264            push    ar3
02FA C004      1265            push    ar4
02FC C005      1266            push    ar5
02FE C006      1267            push    ar6
0300 120000    1268            lcall   _Timer3us
0303 D006      1269            pop     ar6
0305 D005      1270            pop     ar5
0307 D004      1271            pop     ar4
0309 D003      1272            pop     ar3
030B D002      1273            pop     ar2
030D           1274   ;        EFM8_JDY40_Transmitter.c:308: for (k=0; k<4; k++)
030D 0E        1275            inc     r6
030E 8000      1276            sjmp    L018003?
0310           1277   L018009?:
0310           1278   ;        EFM8_JDY40_Transmitter.c:306: for(j=0; j<ms; j++)
0310 0C        1279            inc     r4
0311 BC0000    1280            cjne    r4,#0x00,L018007?
0314 0D        1281            inc     r5
0315 8000      1282            sjmp    L018007?
0317           1283   L018011?:
0317 22        1284            ret
0318           1285   ;------------------------------------------------------------
0318           1286   ;Allocation info for local variables in function 'SendATCommand'
0318           1287   ;------------------------------------------------------------
0318           1288   ;s                         Allocated to registers r2 r3 r4 
0318           1289   ;------------------------------------------------------------
0318           1290   ;        EFM8_JDY40_Transmitter.c:316: void SendATCommand (char * s)
0318           1291   ;        -----------------------------------------
0318           1292   ;         function SendATCommand
0318           1293   ;        -----------------------------------------
0318           1294   _SendATCommand:
0318 AA82      1295            mov     r2,dpl
031A AB83      1296            mov     r3,dph
031C ACF0      1297            mov     r4,b
031E           1298   ;        EFM8_JDY40_Transmitter.c:318: printf("Command: %s", s);
031E C002      1299            push    ar2
0320 C003      1300            push    ar3
0322 C004      1301            push    ar4
0324 C002      1302            push    ar2
0326 C003      1303            push    ar3
0328 C004      1304            push    ar4
032A 7480      1305            mov     a,#__str_0
032C C0E0      1306            push    acc
032E 74C3      1307            mov     a,#(__str_0 >> 8)
0330 C0E0      1308            push    acc
0332 7480      1309            mov     a,#0x80
0334 C0E0      1310            push    acc
0336 120000    1311            lcall   _printf
0339 E581      1312            mov     a,sp
033B 24FA      1313            add     a,#0xfa
033D F581      1314            mov     sp,a
033F           1315   ;        EFM8_JDY40_Transmitter.c:319: P2_0=0; // 'set' pin to 0 is 'AT' mode.
033F C2A0      1316            clr     _P2_0
0341           1317   ;        EFM8_JDY40_Transmitter.c:320: waitms(5);
0341 900005    1318            mov     dptr,#0x0005
0344 120000    1319            lcall   _waitms
0347 D004      1320            pop     ar4
0349 D003      1321            pop     ar3
034B D002      1322            pop     ar2
034D           1323   ;        EFM8_JDY40_Transmitter.c:321: sendstr1(s);
034D 8A82      1324            mov     dpl,r2
034F 8B83      1325            mov     dph,r3
0351 8CF0      1326            mov     b,r4
0353 120000    1327            lcall   _sendstr1
0356           1328   ;        EFM8_JDY40_Transmitter.c:322: getstr1(buff);
0356 901680    1329            mov     dptr,#_buff
0359 75F040    1330            mov     b,#0x40
035C 120000    1331            lcall   _getstr1
035F           1332   ;        EFM8_JDY40_Transmitter.c:323: waitms(10);
035F 90000A    1333            mov     dptr,#0x000A
0362 120000    1334            lcall   _waitms
0365           1335   ;        EFM8_JDY40_Transmitter.c:324: P2_0=1; // 'set' pin to 1 is normal operation mode.
0365 D2A0      1336            setb    _P2_0
0367           1337   ;        EFM8_JDY40_Transmitter.c:325: printf("Response: %s\r\n", buff);
0367 7480      1338            mov     a,#_buff
0369 C0E0      1339            push    acc
036B 7416      1340            mov     a,#(_buff >> 8)
036D C0E0      1341            push    acc
036F 7440      1342            mov     a,#0x40
0371 C0E0      1343            push    acc
0373 7400      1344            mov     a,#__str_1
0375 C0E0      1345            push    acc
0377 74C4      1346            mov     a,#(__str_1 >> 8)
0379 C0E0      1347            push    acc
037B 7480      1348            mov     a,#0x80
037D C0E0      1349            push    acc
037F 120000    1350            lcall   _printf
0382 E581      1351            mov     a,sp
0384 24FA      1352            add     a,#0xfa
0386 F581      1353            mov     sp,a
0388 22        1354            ret
0389           1355   ;------------------------------------------------------------
0389           1356   ;Allocation info for local variables in function 'main'
0389           1357   ;------------------------------------------------------------
0389           1358   ;cnt                       Allocated to registers 
0389           1359   ;X_pos_L                   Allocated with name '_main_X_pos_L_1_107'
0389           1360   ;Y_pos_R                   Allocated to registers r6 r7 r2 r3 
0389           1361   ;X_pos_L_string            Allocated with name '_main_X_pos_L_string_1_107'
0389           1362   ;count                     Allocated to registers 
0389           1363   ;------------------------------------------------------------
0389           1364   ;        EFM8_JDY40_Transmitter.c:328: void main (void)
0389           1365   ;        -----------------------------------------
0389           1366   ;         function main
0389           1367   ;        -----------------------------------------
0389           1368   _main:
0389           1369   ;        EFM8_JDY40_Transmitter.c:338: waitms(500);
0389 9001F4    1370            mov     dptr,#0x01F4
038C 120000    1371            lcall   _waitms
038F           1372   ;        EFM8_JDY40_Transmitter.c:339: printf("\r\nJDY-40 test\r\n");
038F 7440      1373            mov     a,#__str_2
0391 C0E0      1374            push    acc
0393 74C4      1375            mov     a,#(__str_2 >> 8)
0395 C0E0      1376            push    acc
0397 7480      1377            mov     a,#0x80
0399 C0E0      1378            push    acc
039B 120000    1379            lcall   _printf
039E 1581      1380            dec     sp
03A0 1581      1381            dec     sp
03A2 1581      1382            dec     sp
03A4           1383   ;        EFM8_JDY40_Transmitter.c:340: UART1_Init(9600);
03A4 902580    1384            mov     dptr,#0x2580
03A7 E4        1385            clr     a
03A8 F5F0      1386            mov     b,a
03AA 120000    1387            lcall   _UART1_Init
03AD           1388   ;        EFM8_JDY40_Transmitter.c:342: InitADC();
03AD 120000    1389            lcall   _InitADC
03B0           1390   ;        EFM8_JDY40_Transmitter.c:343: InitPinADC(2, 1); // Configure P0.1 as analog input
03B0 756001    1391            mov     _InitPinADC_PARM_2,#0x01
03B3 758202    1392            mov     dpl,#0x02
03B6 120000    1393            lcall   _InitPinADC
03B9           1394   ;        EFM8_JDY40_Transmitter.c:344: InitPinADC(2, 2); // Configure P2.3 as analog input
03B9 756002    1395            mov     _InitPinADC_PARM_2,#0x02
03BC 758202    1396            mov     dpl,#0x02
03BF 120000    1397            lcall   _InitPinADC
03C2           1398   ;        EFM8_JDY40_Transmitter.c:360: SendATCommand("AT+DVIDFBCD\r\n");  
03C2 90C480    1399            mov     dptr,#__str_3
03C5 75F080    1400            mov     b,#0x80
03C8 120000    1401            lcall   _SendATCommand
03CB           1402   ;        EFM8_JDY40_Transmitter.c:363: SendATCommand("AT+VER\r\n");
03CB 90C4C0    1403            mov     dptr,#__str_4
03CE 75F080    1404            mov     b,#0x80
03D1 120000    1405            lcall   _SendATCommand
03D4           1406   ;        EFM8_JDY40_Transmitter.c:364: SendATCommand("AT+BAUD\r\n");
03D4 90C500    1407            mov     dptr,#__str_5
03D7 75F080    1408            mov     b,#0x80
03DA 120000    1409            lcall   _SendATCommand
03DD           1410   ;        EFM8_JDY40_Transmitter.c:365: SendATCommand("AT+RFID\r\n");
03DD 90C540    1411            mov     dptr,#__str_6
03E0 75F080    1412            mov     b,#0x80
03E3 120000    1413            lcall   _SendATCommand
03E6           1414   ;        EFM8_JDY40_Transmitter.c:366: SendATCommand("AT+DVID\r\n");
03E6 90C580    1415            mov     dptr,#__str_7
03E9 75F080    1416            mov     b,#0x80
03EC 120000    1417            lcall   _SendATCommand
03EF           1418   ;        EFM8_JDY40_Transmitter.c:367: SendATCommand("AT+RFC\r\n");
03EF 90C5C0    1419            mov     dptr,#__str_8
03F2 75F080    1420            mov     b,#0x80
03F5 120000    1421            lcall   _SendATCommand
03F8           1422   ;        EFM8_JDY40_Transmitter.c:368: SendATCommand("AT+POWE\r\n");
03F8 90C600    1423            mov     dptr,#__str_9
03FB 75F080    1424            mov     b,#0x80
03FE 120000    1425            lcall   _SendATCommand
0401           1426   ;        EFM8_JDY40_Transmitter.c:369: SendATCommand("AT+CLSS\r\n");
0401 90C640    1427            mov     dptr,#__str_10
0404 75F080    1428            mov     b,#0x80
0407 120000    1429            lcall   _SendATCommand
040A           1430   ;        EFM8_JDY40_Transmitter.c:373: while(1)
040A           1431   L020002?:
040A           1432   ;        EFM8_JDY40_Transmitter.c:379: X_pos_L = Volts_at_Pin(QFP32_MUX_P0_7);
040A 758205    1433            mov     dpl,#0x05
040D 120000    1434            lcall   _Volts_at_Pin
0410 858260    1435            mov     _main_X_pos_L_1_107,dpl
0413 858361    1436            mov     (_main_X_pos_L_1_107 + 1),dph
0416 85F062    1437            mov     (_main_X_pos_L_1_107 + 2),b
0419 F563      1438            mov     (_main_X_pos_L_1_107 + 3),a
041B           1439   ;        EFM8_JDY40_Transmitter.c:380: Y_pos_R = Volts_at_Pin(QFP32_MUX_P0_6);
041B 758204    1440            mov     dpl,#0x04
041E 120000    1441            lcall   _Volts_at_Pin
0421 AE82      1442            mov     r6,dpl
0423 AF83      1443            mov     r7,dph
0425 AAF0      1444            mov     r2,b
0427 FB        1445            mov     r3,a
0428           1446   ;        EFM8_JDY40_Transmitter.c:382: sprintf(buff, "%0.4f %0.4f\n\0", X_pos_L, Y_pos_R);
0428 C006      1447            push    ar6
042A C007      1448            push    ar7
042C C002      1449            push    ar2
042E C003      1450            push    ar3
0430 C060      1451            push    _main_X_pos_L_1_107
0432 C061      1452            push    (_main_X_pos_L_1_107 + 1)
0434 C062      1453            push    (_main_X_pos_L_1_107 + 2)
0436 C063      1454            push    (_main_X_pos_L_1_107 + 3)
0438 74C0      1455            mov     a,#__str_11
043A C0E0      1456            push    acc
043C 74C6      1457            mov     a,#(__str_11 >> 8)
043E C0E0      1458            push    acc
0440 7480      1459            mov     a,#0x80
0442 C0E0      1460            push    acc
0444 7480      1461            mov     a,#_buff
0446 C0E0      1462            push    acc
0448 7416      1463            mov     a,#(_buff >> 8)
044A C0E0      1464            push    acc
044C 7440      1465            mov     a,#0x40
044E C0E0      1466            push    acc
0450 120000    1467            lcall   _sprintf
0453 E581      1468            mov     a,sp
0455 24F2      1469            add     a,#0xf2
0457 F581      1470            mov     sp,a
0459           1471   ;        EFM8_JDY40_Transmitter.c:386: sendstr1(buff);
0459 901680    1472            mov     dptr,#_buff
045C 75F040    1473            mov     b,#0x40
045F 120000    1474            lcall   _sendstr1
0462           1475   ;        EFM8_JDY40_Transmitter.c:388: waitms(30);
0462 90001E    1476            mov     dptr,#0x001E
0465 120000    1477            lcall   _waitms
0468 8000      1478            sjmp    L020002?
046A           1479            rseg R_CSEG
046A           1480   
0000           1481            rseg R_XINIT
0000           1482   
0000           1483            rseg R_CONST
0000           1484   __str_0:
0000 436F6D6D  1485            db 'Command: %s'
     616E643A
     202573
000B 00        1486            db 0x00
000C           1487   __str_1:
000C 52657370  1488            db 'Response: %s'
     6F6E7365
     3A202573
0018 0D        1489            db 0x0D
0019 0A        1490            db 0x0A
001A 00        1491            db 0x00
001B           1492   __str_2:
001B 0D        1493            db 0x0D
001C 0A        1494            db 0x0A
001D 4A44592D  1495            db 'JDY-40 test'
     34302074
     657374
0028 0D        1496            db 0x0D
0029 0A        1497            db 0x0A
002A 00        1498            db 0x00
002B           1499   __str_3:
002B 41542B44  1500            db 'AT+DVIDFBCD'
     56494446
     424344
0036 0D        1501            db 0x0D
0037 0A        1502            db 0x0A
0038 00        1503            db 0x00
0039           1504   __str_4:
0039 41542B56  1505            db 'AT+VER'
     4552
003F 0D        1506            db 0x0D
0040 0A        1507            db 0x0A
0041 00        1508            db 0x00
0042           1509   __str_5:
0042 41542B42  1510            db 'AT+BAUD'
     415544
0049 0D        1511            db 0x0D
004A 0A        1512            db 0x0A
004B 00        1513            db 0x00
004C           1514   __str_6:
004C 41542B52  1515            db 'AT+RFID'
     464944
0053 0D        1516            db 0x0D
0054 0A        1517            db 0x0A
0055 00        1518            db 0x00
0056           1519   __str_7:
0056 41542B44  1520            db 'AT+DVID'
     564944
005D 0D        1521            db 0x0D
005E 0A        1522            db 0x0A
005F 00        1523            db 0x00
0060           1524   __str_8:
0060 41542B52  1525            db 'AT+RFC'
     4643
0066 0D        1526            db 0x0D
0067 0A        1527            db 0x0A
0068 00        1528            db 0x00
0069           1529   __str_9:
0069 41542B50  1530            db 'AT+POWE'
     4F5745
0070 0D        1531            db 0x0D
0071 0A        1532            db 0x0A
0072 00        1533            db 0x00
0073           1534   __str_10:
0073 41542B43  1535            db 'AT+CLSS'
     4C5353
007A 0D        1536            db 0x0D
007B 0A        1537            db 0x0A
007C 00        1538            db 0x00
007D           1539   __str_11:
007D 25302E34  1540            db '%0.4f %0.4f'
     66202530
     2E3466
0088 0A        1541            db 0x0A
0089 00        1542            db 0x00
008A 00        1543            db 0x00
008B           1544   
0003           1545            CSEG
0003           1546   
0003           1547   end
